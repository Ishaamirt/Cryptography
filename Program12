import math
KEY_SIZE = 25
def num_possible_keys():
    total = 1
    for i in range(KEY_SIZE):
        total *= (KEY_SIZE - i)
    return total
keys = num_possible_keys()
print(f"The Playfair cipher has approximately {math.log2(keys):.2f} possible 
keys.")
import numpy as np
key = np.array([[9, 4], [5, 7]])
def string_to_matrix(s):
    return np.array([ord(c) - 97 for c in s])
def matrix_to_string(matrix):
    return ''.join([chr(int(x) + 97) for x in matrix])
def hill_cipher_encrypt(message):
    message_matrix = string_to_matrix(message)
    message_matrix = np.reshape(message_matrix, (-1, 2)).T
    len = message_matrix.shape[1]
    encrypted_matrix = np.mod(np.dot(key, message_matrix), 26)
    encrypted_message = matrix_to_string(encrypted_matrix.T.flatten())
def hill_encrypt(message, key):

    message = message.replace(" ", "").lower()
    if len(message) % 2 != 0:
        message += 'x'
    pairs = [message[i:i+2] for i in range(0, len(message), 2)]
    numerical_values = [ord(ch) - ord('a') for pair in pairs for ch in pair]
    encrypted_values = []
    for i in range(0, len(numerical_values), 2):
        x = numerical_values[i]
        y = numerical_values[i+1]
        encrypted_x = (key[0][0] * x + key[0][1] * y) % 26
        encrypted_y = (key[1][0] * x + key[1][1] * y) % 26
        encrypted_values.extend([encrypted_x, encrypted_y])
    encrypted_message = ''.join(chr(value + ord('a')) for value in encrypted_values)
    return encrypted_message

key = [[9, 4], [5, 7]]
message = "meet me at the usual place at ten rather than eight oclock"
encrypted_message = hill_cipher_encrypt(message)
print(encrypted_message)
encrypted_message = hill_encrypt(message, key)
print("Encrypted message:", encrypted_message)
